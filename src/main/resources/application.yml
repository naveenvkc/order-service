server:
  port: 9002
  shutdown: graceful
  netty:
    connection-timeout: 2s
    idle-timeout: 15s


spring:
  application:
    name: order-service
  lifecycle:
    timeout-per-shutdown-phase: 15s
  datasource:
    username: user
    password: password
    url: jdbc:postgresql://localhost:5432/polardb_order?currentSchema=polar_bookshop
    hikari:
      connection-timeout: 2000 #ms
      maximum-pool-size: 5
  cloud:
    function:
      definition: consumeDispatchOrder
    stream:
      bindings:
        consumeDispatchOrder-in-0:
          destination: order-dispatched
          group: ${spring.application.name}
        acceptOrder-out-0:
          destination: order-accepted
      rabbit:
        bindings:
          acceptOrder-out-0:
            producer:
              transacted: true
  rabbitmq:
    host: localhost
    port: 5672
    username: user
    password: password
    connection-timeout: 5s
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: http://localhost:8080/realms/PolarBookshop

polar:
  catalog-service-uri: "http://localhost:9001"

logging:
  pattern:
    level: "%5p [${spring.application.name},%X{trace_id},%X{span_id}]"

management:
  endpoints:
    web:
      exposure:
        include: health, prometheus
  endpoint:
    health:
      show-details: always
      show-components: always
      probes:
        enabled: true

openapi:
  oAuthFlow:
    tokenUrl: http://localhost:9000/realms/Microservices-demo-realm/protocol/openid-connect/token
  order:
    base-path: /api/v1